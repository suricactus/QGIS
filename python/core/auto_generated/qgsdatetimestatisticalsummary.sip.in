/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/qgsdatetimestatisticalsummary.h                             *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/





class QgsDateTimeStatisticalSummary
{
%Docstring
Calculator for summary statistics and aggregates for a list of datetimes.

Statistics are calculated by calling :py:func:`~calculate` and passing a list of datetimes. The
individual statistics can then be retrieved using the associated methods. Note that not all statistics
are calculated by default. Statistics which require slower computations are only calculated by
specifying the statistic in the constructor or via :py:func:`~setStatistics`.

.. versionadded:: 2.16
%End

%TypeHeaderCode
#include "qgsdatetimestatisticalsummary.h"
%End
  public:

    enum Statistic
    {
      Count,
      CountDistinct,
      CountMissing,
      Mean,
      Median,
      StDev,
      StDevSample,
      Min,
      Max,
      Range,
      Minority,
      Majority,
      FirstQuartile,
      ThirdQuartile,
      InterQuartileRange,
      First,
      Last,
      Mode,

      All,
    };
    typedef QFlags<QgsDateTimeStatisticalSummary::Statistic> Statistics;


    QgsDateTimeStatisticalSummary( QgsDateTimeStatisticalSummary::Statistics stats = All );
%Docstring
Constructor for QgsDateTimeStatisticalSummary

:param stats: flags for statistics to calculate
%End

    Statistics statistics() const;
%Docstring
Returns flags which specify which statistics will be calculated. Some statistics
are always calculated (e.g., count).

.. seealso:: :py:func:`setStatistics`
%End

    void setStatistics( Statistics stats );
%Docstring
Sets flags which specify which statistics will be calculated. Some statistics
are always calculated (e.g., count).

:param stats: flags for statistics to calculate

.. seealso:: :py:func:`statistics`
%End

    void reset();
%Docstring
Resets the calculated values
%End

    void calculate( const QVariantList &values );
%Docstring
Calculates summary statistics for a list of variants. Any non-datetime variants will be
ignored.

:param values: list of variants

.. seealso:: :py:func:`addValue`
%End

    void addValue( const QVariant &value );
%Docstring
Adds a single datetime to the statistics calculation. Calling this method
allows datetimes to be added to the calculation one at a time. For large
quantities of dates this may be more efficient then first adding all the
variants to a list and calling :py:func:`~QgsDateTimeStatisticalSummary.calculate`.

:param value: datetime to add. Any non-datetime variants will be ignored.

.. note::

   call :py:func:`~QgsDateTimeStatisticalSummary.reset` before adding the first datetime using this method
   to clear the results from any previous calculations

.. note::

   :py:func:`~QgsDateTimeStatisticalSummary.finalize` must be called after adding the final value and before
   retrieving calculated statistics.

.. seealso:: :py:func:`calculate`

.. seealso:: :py:func:`finalize`
%End

    void finalize();
%Docstring
Must be called after adding all datetimes with :py:func:`~QgsDateTimeStatisticalSummary.addValue` and before retrieving
any calculated datetime statistics.

.. seealso:: :py:func:`addValue`
%End

    QVariant statistic( QgsDateTimeStatisticalSummary::Statistic stat ) const;
%Docstring
Returns the value of a specified statistic

:param stat: statistic to return

:return: calculated value of statistic
%End

    int count() const;
%Docstring
Returns the calculated count of values.
%End

    int countDistinct() const;
%Docstring
Returns the number of distinct datetime values.
%End

    QSet<QDateTime> distinctValues() const;
%Docstring
Returns the set of distinct datetime values.
%End

    int countMissing() const;
%Docstring
Returns the number of missing (null) datetime values.
%End

    QDateTime min() const;
%Docstring
Returns the minimum (earliest) non-null datetime value.
%End

    QDateTime max() const;
%Docstring
Returns the maximum (latest) non-null datetime value.
%End

    QgsInterval range() const;
%Docstring
Returns the range (interval between earliest and latest non-null datetime values).
%End

    QDateTime mean() const;
%Docstring
Returns calculated mean of values. A null QDateTime may be returned if the mean cannot
be calculated.

.. versionadded:: 3.16
%End

    QDateTime median() const;
%Docstring
Returns calculated median of values. This is only calculated if Statistic.Median has
been specified in the constructor or via setStatistics. 

.. versionadded:: 3.16
%End

    QgsInterval stDev() const;
%Docstring
Returns population standard deviation. This is only calculated if Statistic.StDev has
been specified in the constructor or via setStatistics. A null QDateTime may be returned if the standard deviation cannot
be calculated.

.. seealso:: :py:func:`sampleStDev`

.. versionadded:: 3.16
%End

    QgsInterval sampleStDev() const;
%Docstring
Returns sample standard deviation. This is only calculated if Statistic.StDev has
been specified in the constructor or via setStatistics. A null QDateTime may be returned if the standard deviation cannot
be calculated.

.. seealso:: :py:func:`stDev`

.. versionadded:: 3.16
%End

    QDateTime firstQuartile() const;
%Docstring
Returns the first quartile of the values. The quartile is calculated using the
"Tukey's hinges" method. A null QDateTime may be returned if the first quartile cannot
be calculated.

.. seealso:: :py:func:`thirdQuartile`

.. seealso:: :py:func:`interQuartileRange`

.. versionadded:: 3.16
%End

    QDateTime thirdQuartile() const;
%Docstring
Returns the third quartile of the values. The quartile is calculated using the
"Tukey's hinges" method. A null QDateTime may be returned if the third quartile cannot
be calculated.

.. seealso:: :py:func:`firstQuartile`

.. seealso:: :py:func:`interQuartileRange`

.. versionadded:: 3.16
%End

    QgsInterval interQuartileRange() const;
%Docstring
Returns the inter quartile range of the values. The quartiles are calculated using the
"Tukey's hinges" method. A null QDateTime may be returned if the IQR cannot
be calculated.

.. seealso:: :py:func:`firstQuartile`

.. seealso:: :py:func:`thirdQuartile`

.. versionadded:: 3.16
%End

    QDateTime minority() const;
%Docstring
Returns the least common string. The minority is the value with least occurrences in the list
This is only calculated if Statistic.Minority has been specified in the constructor
or via setStatistics. If multiple values match, return the first value sorted alphabetically
ascending (this may change in future versions).

.. seealso:: :py:func:`majority`

.. versionadded:: 3.16
%End

    QDateTime majority() const;
%Docstring
Returns the most common string. The majority is the value with most occurrences in the list
This is only calculated if Statistic.Majority has been specified in the constructor
or via setStatistics. If multiple values match, return the first value sorted alphabetically
ascending (this may change in future versions).

.. seealso:: :py:func:`minority`

.. versionadded:: 3.16
%End

    QDateTime first() const;
%Docstring
Returns the first value obtained.

.. seealso:: :py:func:`last`

.. versionadded:: 3.16
%End

    QDateTime last() const;
%Docstring
Returns the last value obtained.

.. seealso:: :py:func:`first`

.. versionadded:: 3.16
%End

    QList<QDateTime> mode() const;
%Docstring
Returns the mode of the values. The values are sorted alphabetically in ascending order (this may change in future versions).

.. seealso:: :py:func:`majority`

.. versionadded:: 3.16
%End

    static QString displayName( QgsDateTimeStatisticalSummary::Statistic statistic );
%Docstring
Returns the friendly display name for a statistic

:param statistic: statistic to return name for
%End

};

QFlags<QgsDateTimeStatisticalSummary::Statistic> operator|(QgsDateTimeStatisticalSummary::Statistic f1, QFlags<QgsDateTimeStatisticalSummary::Statistic> f2);


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/qgsdatetimestatisticalsummary.h                             *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
